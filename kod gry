
-*zdefiniowane biblioteki
#include <iostream>
#include <stdlib.h> 
#include<ncurses/ncurses.h>

using namespace std;

int main()
*klamra początkowa
{
*definiowanie tablicy

    int board[10][10] =
    {
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
        {0,0,0,0,0,0,0,0,0},
    };
*wprowadzenie zmiennej gracz1
    int gracz1;
*wprowadzenie użycia znaku
    char znak;
*początek korzystania z bibliteki ncurses
    initscr();
*funkcja dzięki, której znak nie pojawia się na ekranie po jego naciśnięciu
    noecho();
*funkcje zmieniające kolor
    start_color();
    init_pair(1,COLOR_BLACK,COLOR_RED);
    attron(COLOR_PAIR(1));
*pogrubienie tekstu
    attron(A_BOLD);
*drukowanie na ekranie napisu "GOMOKU", pod odpowiednimi współrzędnymi
    mvprintw(2,8,"   ____      _____       ___ ___       _____                        ");
    mvprintw(3,8,"|*|        (|     |)   (|   |   |)   (|     |)  *|   **   *|      |*");
    mvprintw(4,8,"|*|        *|     |*   *|   |   |*   *|     |*  *|  **    *|      |*");
    mvprintw(5,8,"|*|  ___   *|     |*   *|   |   |*   *|     |*  *| **     *|      |*");
    mvprintw(6,8,"|*|    |*) *|     |*   *|   |   |*   *|     |*  *|**      *|      |*");
    mvprintw(7,8,"|*|    |*| *|     |*   *|   |   |*   *|     |*  *|  **    *|      |*");
    mvprintw(8,8,"(*|____|*) (|_____|)   *|   |   |*   (|_____|)  *|    **  (|______|)");
    mvprintw(9,8,"   ----      -----      -   -   -      -----     -     -    ------  ");
*koniec korzystania z funkcji pogrubienia
    attroff(A_BOLD);
*koniec zmiany kolorów
    attroff(COLOR_PAIR(1));
*funkcje zmieniające kolor
    start_color();
    init_pair(2,COLOR_BLACK,COLOR_WHITE);
    attron(COLOR_PAIR(2));
*drukowanie na ekranie napisów
    mvprintw(13,18,"Nacisnij odpowiedni przycisk....\n");
    mvprintw(16,18,"1.START\n");
    mvprintw(19,18,"2.demo gry\n");
    mvprintw(22,18,"3.Czym jest Gomoku?\n");
    mvprintw(25,18,"4.Opusc gre\n");
*koniec korzystania z funkcji kolorów
    attroff(COLOR_PAIR(2));
*pobieranie znaku z klawiatury po wciśnięciu
    znak=getch();
*czyszczenie ekranu
    clear();
*tworzenie menu wyboru za pomocą funkcji switch 
    switch(znak)
    {
*wybór danego okna po naciśnięciu 1
    case '1':
*drukowanie na ekranie napisu
            printw("Witaj w grze Gomoku");
*drukowanie na ekranie planszy gry
            mvprintw(2,13,"   1   2   3   4   5   6   7   8   9   ");
            mvprintw(3,13,"  /-----------------------------------");
            mvprintw(4,13,"a|   |   |   |   |   |   |   |   |   |");
            mvprintw(5,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(6,13,"b|   |   |   |   |   |   |   |   |   |");
            mvprintw(7,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(8,13,"c|   |   |   |   |   |   |   |   |   |");
            mvprintw(9,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(10,13,"d|   |   |   |   |   |   |   |   |   |");
            mvprintw(11,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(12,13,"e|   |   |   |   |   |   |   |   |   |");
            mvprintw(13,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(14,13,"f|   |   |   |   |   |   |   |   |   |");
            mvprintw(15,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(16,13,"g|   |   |   |   |   |   |   |   |   |");
            mvprintw(17,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(18,13,"h|   |   |   |   |   |   |   |   |   | ");
            mvprintw(19,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(20,13,"i|   |   |   |   |   |   |   |   |   |");
            mvprintw(21,13,"  -----------------------------------/");
            mvprintw(22,13," Gre rozpoczyna gracz nr 1- X ");
*pętla odpowiedzialna za liczbę ruchów w grze
            for(int i=0;i<40;i++)
        {
*odświeżenie ekranu
            refresh();
*drukowanie napisu
            mvprintw(23,13,"Podaj wspolrzedne gdzie chcesz umiescic X/O (1-9):");
*odświeżenie ekranu
            refresh();
*wprowadzenie współrzędnej na planszy
            int x=getch()-'1'+1;
*drukowanie napisu na ekranie
            mvprintw(24,13,"Podaj wspolrzedne gdzie chcesz umiescic X/O (a-i):");
*odświeżenie ekranu
            refresh();
*definiowanie drugiej współrzędnej
            int y=getch()-'a'+1;
*warunek 1 jeśli zdefiniowana tablica = 0 (pusta)to:
            if (board[x][y] == 0)
                {
*drukowanie napisu, o podaniu współrzędnych
            mvprintw(25,13,"Podano: %d %d", x, y);
*odświeżenie ekranu
            refresh();
*warunek (jeśli gracz umieścił swój znaczek na ekranie)
            if (gracz1==1)
                {
*pogrubienie tekstu
            attron(A_BOLD);
*jeśli warunek 2 jest spełniony to drukuj pod odpowiednimi współrzędnymi O
            mvprintw(2+1+2*(y-1)+1, 13+1+4*(x-1)+2, "O");
*koniec pogrubienia
            attroff(A_BOLD);
                }
*else- co zrbić jeśli warunek 2 nie jest spełniony
            else

                {
*funkcje zmieniające kolor
            start_color();
            init_pair(3,COLOR_RED,COLOR_WHITE);
            attron(COLOR_PAIR(3));
*jeśli warunek 2 nie jest spełniony to drukuje na ekranie znak X 
            mvprintw(2+1+2*(y-1)+1, 13+1+4*(x-1)+2, "X");
*koniec zmiany kolorów
            attroff(COLOR_PAIR(3));
                }
*po wpisaniu znaku zdefiniowanej tablicy zostaje przyporządkowana wartość 1
            board[x][y] = 1;
*zmiana ruchu gracza- gracze wpisują kółko i krzyżyk na zmianę
            gracz1=(gracz1+1)%2;
                }
*else – co jeśli warunek 1 nie jest spełniony
            else
                {
*drukowanie napisu
            mvprintw(25 ,13,"Pole zajete");
                }
*koniec pętli
        }

*koniec działania wyboru
    break;
*wybór okna po naciśnięciu 2
    case '2':
*drukowanie ekranu dema
            mvprintw(2,13,"   1   2   3   4   5   6   7   8   9   ");
            mvprintw(3,13,"  /-----------------------------------");
            mvprintw(4,13,"a|   | X | X | X | X | X |   |   |   |");
            mvprintw(5,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(6,13,"b|   |   |   |   |   |   |   |   |   |");
            mvprintw(7,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(8,13,"c|   |   |   |   |   | O |   |   |   |");
            mvprintw(9,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(10,13,"d|   |   |   |   |   | O |   |   |   |");
            mvprintw(11,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(12,13,"e|   | X |   |   |   | O |   |   |   |");
            mvprintw(13,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(14,13,"f|   |   | O |   |   | O |   |   |   |");
            mvprintw(15,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(16,13,"g|   |   |   | X |   | O |   |   |   |");
            mvprintw(17,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(18,13,"h|   |   |   |   | O |   |   |   |   | ");
            mvprintw(19,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(20,13,"i|   |   |   |   |   | X |   |   |   |");
            mvprintw(21,13,"  -----------------------------------/");
*pętla odpowiadająca za ilość ruchów
            for (int i = 0; i<2;i++)
*początek pętli
        {
*odświeżenie ekranu
            refresh();
*drukowanie napisów
            mvprintw(23,13,"Masz szanse, aby wyprobowac gre, masz tylko 2 proby");
            mvprintw(24,13,"Podaj wspolrzedne gdzie chcesz umiescic X/O (1-9):");
            mvprintw(25,13,"inne niz widzisz na ekranie");
*odświeżenie ekranu
            refresh();
*definiowanie pierwszej współrzędnej
            int x=getch()-'1'+1;
*drukowanie napisu
            mvprintw(26,13,"Podaj wspolrzedne gdzie chcesz umiescic X/O (a-i):");
            mvprintw(27,13,"inne niz widzisz na ekranie");
*odświeżenie ekranu
            refresh();
*definiowanie drugiej współrzędnej
            int y=getch()-'a'+1;
*warunek 1 (warunek, że tablica jest pusta)
            if (board[x][y] == 0)
                {
*drukowanie napisu na ekranie
            mvprintw(28,13,"Podano: %d %d", x, y);

*odświeżenia ekranu
            refresh();
*warunek 2 (jeśli gracz1 wykonał ruch)
            if (gracz1==1)
                {
*drukowanie na ekranie O
            mvprintw(2+1+2*(y-1)+1, 13+1+4*(x-1)+2, "O");
                }
*else – jeśli warunek 2 nie zostanie spełniony
            else
                {
*zmiana kolorów
            start_color();
            init_pair(3,COLOR_RED,COLOR_WHITE);
            attron(COLOR_PAIR(3));
*drukowanie  X, jeśli warunek 2 nie jest spełniony
            mvprintw(2+1+2*(y-1)+1, 13+1+4*(x-1)+2, "X");
*koniec zmiany kolorów
            attroff(COLOR_PAIR(3));
                }
*przypisanie tablicy wartości 1 po umieszczeniu znaku przez gracza
            board[x][y] = 1;
*gracze grają na zmianę- funkcja powodująca, że jest zmiana kolejki
            gracz1=(gracz1+1)%2;
                }
            else
                {
*drukowanie na ekranie napisu, jeśli warunek 1 nie jest spełniony
            mvprintw(28 ,13,"Pole zajete");
                }
*koniec pętli
        }
*drukowanie napisów na ekranie gry
            mvprintw(29,13,"Wcisnij 1,aby przejsc do gry");
            mvprintw(30,13,"2.Wyjscie");
*wprowadzenie zmiennej znak1
            char znak1;
*pobieranie znaku z klawiatury
            znak1=getch();
*czyszczenie ekranu
            clear();
*menu wyboru switch
            switch (znak1)
        {
*wybór 1
            case '1':
*drukowanie ekranu gry
            printw("Witaj w grze Gomoku");
            mvprintw(2,13,"   1   2   3   4   5   6   7   8   9   ");
            mvprintw(3,13,"  /-----------------------------------");
            mvprintw(4,13,"a|   |   |   |   |   |   |   |   |   |");
            mvprintw(5,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(6,13,"b|   |   |   |   |   |   |   |   |   |");
            mvprintw(7,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(8,13,"c|   |   |   |   |   |   |   |   |   |");
            mvprintw(9,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(10,13,"d|   |   |   |   |   |   |   |   |   |");
            mvprintw(11,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(12,13,"e|   |   |   |   |   |   |   |   |   |");
            mvprintw(13,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(14,13,"f|   |   |   |   |   |   |   |   |   |");
            mvprintw(15,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(16,13,"g|   |   |   |   |   |   |   |   |   |");
            mvprintw(17,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(18,13,"h|   |   |   |   |   |   |   |   |   | ");
            mvprintw(19,13," |---+---+---+---+---+---+---+---+---|");
            mvprintw(20,13,"i|   |   |   |   |   |   |   |   |   |");
            mvprintw(21,13,"  -----------------------------------/");
            mvprintw(22,13," Gre rozpoczyna gracz nr 1- X ");
*pętla zawierająca ilość ruchów graczy
            for(int i=0;i<40;i++)
                {
*odświeżenie ekranu
            refresh();
*drukowanie napisu
            mvprintw(23,13,"Podaj wspolrzedne gdzie chcesz umiescic X/O (1-9):");
            refresh();
*definiowanie pierwszej współrzędnej
            int x=getch()-'1'+1;
            mvprintw(24,13,"Podaj wspolrzedne gdzie chcesz umiescic X/O (a-i):");
            refresh();
*definiowanie drugiej współrzędnej
            int y=getch()-'a'+1;
*warunek 1 (pusta tablica)
            if (board[x][y] == 0)
                {
            mvprintw(25,13,"Podano: %d %d", x, y);
            refresh();
*warunek 2 (ruch pierwszego gracza)
            if (gracz1==1)
                {
*pogrubienie tekstu
            attron(A_BOLD);
*drukowanie na ekranie O, jeśli spełniony jest warunek 2
            mvprintw(2+1+2*(y-1)+1, 13+1+4*(x-1)+2, "O");
*koniec pogrubienia
            attroff(A_BOLD);
                 }
            else
                 {
*zmiana kolorów
            start_color();
            init_pair(3,COLOR_RED,COLOR_WHITE);
            attron(COLOR_PAIR(3));
*drukowanie X na ekranie, jeśli warunek 2 nie jest spełniony 
           mvprintw(2+1+2*(y-1)+1, 13+1+4*(x-1)+2, "X");
*koniec zmiany kolorów
            attroff(COLOR_PAIR(3));
                 }
*przypisanie tablicy wartości 1
            board[x][y] = 1;
*zmiana ruchu gracza
            gracz1=(gracz1+1)%2;
                 }
            else
                 {
*drukowanie napisu na ekranie, jeśli warunek 1 nie jest spełniony
            mvprintw(25 ,13,"Pole zajete");
                 }

                 }
            break;
*wybór drugi
            case '2':
*wyjście z programu
            exit(1);
            break;
        }
    break;
*wybór trzeci
    case '3':
*zmiana kolorów
             start_color();
             init_pair(4,COLOR_BLACK,COLOR_GREEN);
             attron(COLOR_PAIR(4));
*drukowanie napisów na ekranie pod odpowiednimi współrzędnymi
             mvprintw(6,15," Wybierz co chcesz sie dowiedziec:");
             mvprintw(10,15,"a- historia gry");
             mvprintw(14,15,"b- o co chodzi w GOMOKU?");
             mvprintw(18,15,"c- ciekawostki");
             attroff(COLOR_PAIR(4));
*wprowadzenie zmiennej
             char znak2;
*pobieranie znaku z klawiatury
             znak2=getch();
*czyszczenie ekranu
             clear ();
*menu wyboru
             switch (znak2)
             {
             case 'a':
*drukowanie napisów
             mvprintw(4,10,"1.Gra wymyslona w Japonii");
             mvprintw(8,4,"2.Jej historia siega VII wieku p.n.e");
             mvprintw(12,10,"3.W 1989 i 1991 odbyly sie Mistrzostwa Swiata w Gomoku Pro");
             mvprintw(16,4,"4.W 2009 roku zawody wznowiono, zmieniono odmiane gry z pro na swap2");
             mvprintw(20,10,"5.Polak Artur Tamiola w 2009 zostal mistrzem swiata gry GOMOKU");
             mvprintw(24,4,"6.Natomiast w 2016 w Tallinie Polacy zostali druzynowymi mistrzami swiata");
             break;
             case 'b':
*zmiana kolorów i drukowanie napisów pod odpowiednimi współrzędnymi
             start_color();
             init_pair(5,COLOR_RED,COLOR_BLACK);
             attron(COLOR_PAIR(5));
             mvprintw(4,10,"1.Jest to gra strategiczno-logiczna");
             mvprintw(8,3,"2.Nazywana rowniez Kolko i krzyzyk do pieciu");
             mvprintw(12,10,"3.Przeznaczona dla 2 graczy");
             mvprintw(16,3,"4.Plansza do gry ma rozmiar 9x9");
             mvprintw(20,10,"5.Gomoku to gra dla doroslych i dzieci w wieku 5+ ");
             mvprintw(24,3,"6.Pozadane sa umiejetnosci myslenia logicznego, strategicznego i taktycznego");
*koniec zmiany kolorów
             attroff(COLOR_PAIR(5));
*koniec okna wyboru
             break;
*kolejny wybór
             case 'c':
*początek zmiany kolorów i drukowanie napisów na ekranie
             start_color();
             init_pair(6,COLOR_BLUE,COLOR_BLACK);
             attron(COLOR_PAIR(6));
             mvprintw(4,10,"1.Najczesciej mistrzami swiata w Gomoku zostawali Wegrzy");
             mvprintw(8,4,"2.W Polsce dziala Polskie Stowarzyszenie Gomoku, Renju i Pente");
             mvprintw(12,10,"3.Mistrzami swiata zostawali tylko przedstawiciele 4 krajow");
             mvprintw(16,4,"4.Sa to Czesi, Wegrzy, Placy i Rosjanie");
             mvprintw(20,10,"5.gomokuworld.com to oficjalna strona poswiecona Gomoku");
             mvprintw(24,4,"6.W gre mozna zagrac online na wielu stronach internetowych");
             attroff(COLOR_PAIR(6));
*koniec okna wyboru
             break;
*ekran pojawiający sie po złym wyborze z menu
             default:
             mvprintw(15,15,"Zle wybrales- wyjscie z gry");
             }

    break;
    case '4':
*wyjście z programu
            exit(1);
    break;
    default:
            mvprintw(6,19,"Zly wybor menu ");
    }
*zatrzymanie programu do naciśniecia klawisza
    getch();
*zakończenie biblioteki ncurses
    endwin();
*zakończenie programu
    return 0;
*klamra kończąca
}

